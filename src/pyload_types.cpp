/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "pyload_types.h"



int _kDownloadStatusValues[] = {
  DownloadStatus::Finished,
  DownloadStatus::Offline,
  DownloadStatus::Online,
  DownloadStatus::Queued,
  DownloadStatus::Skipped,
  DownloadStatus::Waiting,
  DownloadStatus::TempOffline,
  DownloadStatus::Starting,
  DownloadStatus::Failed,
  DownloadStatus::Aborted,
  DownloadStatus::Decrypting,
  DownloadStatus::Custom,
  DownloadStatus::Downloading,
  DownloadStatus::Processing,
  DownloadStatus::Unknown
};
const char* _kDownloadStatusNames[] = {
  "Finished",
  "Offline",
  "Online",
  "Queued",
  "Skipped",
  "Waiting",
  "TempOffline",
  "Starting",
  "Failed",
  "Aborted",
  "Decrypting",
  "Custom",
  "Downloading",
  "Processing",
  "Unknown"
};
const std::map<int, const char*> _DownloadStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(15, _kDownloadStatusValues, _kDownloadStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDestinationValues[] = {
  Destination::Collector,
  Destination::Queue
};
const char* _kDestinationNames[] = {
  "Collector",
  "Queue"
};
const std::map<int, const char*> _Destination_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDestinationValues, _kDestinationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kElementTypeValues[] = {
  ElementType::Package,
  ElementType::File
};
const char* _kElementTypeNames[] = {
  "Package",
  "File"
};
const std::map<int, const char*> _ElementType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kElementTypeValues, _kElementTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* DownloadInfo::ascii_fingerprint = "CF42CA2EF87310701EF8CFD2DD7A07E2";
const uint8_t DownloadInfo::binary_fingerprint[16] = {0xCF,0x42,0xCA,0x2E,0xF8,0x73,0x10,0x70,0x1E,0xF8,0xCF,0xD2,0xDD,0x7A,0x07,0xE2};

uint32_t DownloadInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fid);
          this->__isset.fid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->speed);
          this->__isset.speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eta);
          this->__isset.eta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->format_eta);
          this->__isset.format_eta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bleft);
          this->__isset.bleft = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->format_size);
          this->__isset.format_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->percent);
          this->__isset.percent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status = (DownloadStatus::type)ecast0;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusmsg);
          this->__isset.statusmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->format_wait);
          this->__isset.format_wait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->wait_until);
          this->__isset.wait_until = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->packageID);
          this->__isset.packageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->packageName);
          this->__isset.packageName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plugin);
          this->__isset.plugin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DownloadInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DownloadInfo");
  xfer += oprot->writeFieldBegin("fid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->fid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("speed", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->speed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("eta", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->eta);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("format_eta", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->format_eta);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bleft", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->bleft);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->size);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("format_size", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->format_size);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("percent", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->percent);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("statusmsg", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->statusmsg);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("format_wait", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->format_wait);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("wait_until", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->wait_until);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("packageID", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->packageID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("packageName", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->packageName);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("plugin", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->plugin);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ServerStatus::ascii_fingerprint = "F2178FF1B8C3AAE64F6AEEF9D19F9A6A";
const uint8_t ServerStatus::binary_fingerprint[16] = {0xF2,0x17,0x8F,0xF1,0xB8,0xC3,0xAA,0xE6,0x4F,0x6A,0xEE,0xF9,0xD1,0x9F,0x9A,0x6A};

uint32_t ServerStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->pause);
          this->__isset.pause = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->queue);
          this->__isset.queue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->speed);
          this->__isset.speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->download);
          this->__isset.download = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->reconnect);
          this->__isset.reconnect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServerStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServerStatus");
  xfer += oprot->writeFieldBegin("pause", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->pause);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->active);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("queue", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->queue);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->total);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("speed", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->speed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("download", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->download);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("reconnect", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->reconnect);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ConfigItem::ascii_fingerprint = "C93D890311F28844166CF6E571EB3AC2";
const uint8_t ConfigItem::binary_fingerprint[16] = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

uint32_t ConfigItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConfigItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConfigItem");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ConfigSection::ascii_fingerprint = "E0AABC02533A9D85321AD50858FAE1D6";
const uint8_t ConfigSection::binary_fingerprint[16] = {0xE0,0xAA,0xBC,0x02,0x53,0x3A,0x9D,0x85,0x32,0x1A,0xD5,0x08,0x58,0xFA,0xE1,0xD6};

uint32_t ConfigSection::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            iprot->readListBegin(_etype4, _size1);
            this->items.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->items[_i5].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->outline);
          this->__isset.outline = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConfigSection::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConfigSection");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
    std::vector<ConfigItem> ::const_iterator _iter6;
    for (_iter6 = this->items.begin(); _iter6 != this->items.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  if (this->__isset.outline) {
    xfer += oprot->writeFieldBegin("outline", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->outline);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* FileData::ascii_fingerprint = "BA26B19165D8336A55E281BC6A2E4610";
const uint8_t FileData::binary_fingerprint[16] = {0xBA,0x26,0xB1,0x91,0x65,0xD8,0x33,0x6A,0x55,0xE2,0x81,0xBC,0x6A,0x2E,0x46,0x10};

uint32_t FileData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fid);
          this->__isset.fid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plugin);
          this->__isset.plugin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->format_size);
          this->__isset.format_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->status = (DownloadStatus::type)ecast7;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusmsg);
          this->__isset.statusmsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->packageID);
          this->__isset.packageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FileData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FileData");
  xfer += oprot->writeFieldBegin("fid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->fid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("plugin", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->plugin);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->size);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("format_size", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->format_size);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("statusmsg", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->statusmsg);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("packageID", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->packageID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->error);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I16, 11);
  xfer += oprot->writeI16(this->order);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* PackageData::ascii_fingerprint = "9C1616A7F89D00284D1DE7ABD417D2D3";
const uint8_t PackageData::binary_fingerprint[16] = {0x9C,0x16,0x16,0xA7,0xF8,0x9D,0x00,0x28,0x4D,0x1D,0xE7,0xAB,0xD4,0x17,0xD2,0xD3};

uint32_t PackageData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pid);
          this->__isset.pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->folder);
          this->__isset.folder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->site);
          this->__isset.site = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->dest = (Destination::type)ecast8;
          this->__isset.dest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->linksdone);
          this->__isset.linksdone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sizedone);
          this->__isset.sizedone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sizetotal);
          this->__isset.sizetotal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->linkstotal);
          this->__isset.linkstotal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->links.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            iprot->readListBegin(_etype12, _size9);
            this->links.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += this->links[_i13].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.links = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fids.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            iprot->readListBegin(_etype17, _size14);
            this->fids.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readI32(this->fids[_i18]);
            }
            iprot->readListEnd();
          }
          this->__isset.fids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PackageData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PackageData");
  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->pid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("folder", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->folder);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("site", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->site);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("dest", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->dest);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->order);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.linksdone) {
    xfer += oprot->writeFieldBegin("linksdone", ::apache::thrift::protocol::T_I16, 8);
    xfer += oprot->writeI16(this->linksdone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sizedone) {
    xfer += oprot->writeFieldBegin("sizedone", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->sizedone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sizetotal) {
    xfer += oprot->writeFieldBegin("sizetotal", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->sizetotal);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.linkstotal) {
    xfer += oprot->writeFieldBegin("linkstotal", ::apache::thrift::protocol::T_I16, 11);
    xfer += oprot->writeI16(this->linkstotal);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.links) {
    xfer += oprot->writeFieldBegin("links", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->links.size()));
      std::vector<FileData> ::const_iterator _iter19;
      for (_iter19 = this->links.begin(); _iter19 != this->links.end(); ++_iter19)
      {
        xfer += (*_iter19).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fids) {
    xfer += oprot->writeFieldBegin("fids", ::apache::thrift::protocol::T_LIST, 13);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->fids.size()));
      std::vector<FileID> ::const_iterator _iter20;
      for (_iter20 = this->fids.begin(); _iter20 != this->fids.end(); ++_iter20)
      {
        xfer += oprot->writeI32((*_iter20));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CaptchaTask::ascii_fingerprint = "9633349FCC7151C040D61CE4A7C5FCCA";
const uint8_t CaptchaTask::binary_fingerprint[16] = {0x96,0x33,0x34,0x9F,0xCC,0x71,0x51,0xC0,0x40,0xD6,0x1C,0xE4,0xA7,0xC5,0xFC,0xCA};

uint32_t CaptchaTask::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resultType);
          this->__isset.resultType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CaptchaTask::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CaptchaTask");
  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->tid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("resultType", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->resultType);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Event::ascii_fingerprint = "FC7AC933E295B4EBA8CAC312A9A06BA5";
const uint8_t Event::binary_fingerprint[16] = {0xFC,0x7A,0xC9,0x33,0xE2,0x95,0xB4,0xEB,0xA8,0xCA,0xC3,0x12,0xA9,0xA0,0x6B,0xA5};

uint32_t Event::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->event);
          this->__isset.event = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast21;
          xfer += iprot->readI32(ecast21);
          this->type = (ElementType::type)ecast21;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->destination = (Destination::type)ecast22;
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Event::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Event");
  xfer += oprot->writeFieldBegin("event", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->event);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.destination) {
    xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->destination);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* UserData::ascii_fingerprint = "79B8231729AAFA85B85FA74A964A20B5";
const uint8_t UserData::binary_fingerprint[16] = {0x79,0xB8,0x23,0x17,0x29,0xAA,0xFA,0x85,0xB8,0x5F,0xA7,0x4A,0x96,0x4A,0x20,0xB5};

uint32_t UserData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->role);
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->permission);
          this->__isset.permission = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->template_);
          this->__isset.template_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserData");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->role);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("permission", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->permission);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("template", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->template_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* AccountInfo::ascii_fingerprint = "9063CF5BEE52A0201626A23C256F897E";
const uint8_t AccountInfo::binary_fingerprint[16] = {0x90,0x63,0xCF,0x5B,0xEE,0x52,0xA0,0x20,0x16,0x26,0xA2,0x3C,0x25,0x6F,0x89,0x7E};

uint32_t AccountInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->validuntil);
          this->__isset.validuntil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->login);
          this->__isset.login = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->options.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _ktype24;
            ::apache::thrift::protocol::TType _vtype25;
            iprot->readMapBegin(_ktype24, _vtype25, _size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              std::string _key28;
              xfer += iprot->readString(_key28);
              std::vector<std::string> & _val29 = this->options[_key28];
              {
                _val29.clear();
                uint32_t _size30;
                ::apache::thrift::protocol::TType _etype33;
                iprot->readListBegin(_etype33, _size30);
                _val29.resize(_size30);
                uint32_t _i34;
                for (_i34 = 0; _i34 < _size30; ++_i34)
                {
                  xfer += iprot->readString(_val29[_i34]);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->valid);
          this->__isset.valid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->trafficleft);
          this->__isset.trafficleft = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxtraffic);
          this->__isset.maxtraffic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->premium);
          this->__isset.premium = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AccountInfo");
  xfer += oprot->writeFieldBegin("validuntil", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->validuntil);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->login);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("options", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->options.size()));
    std::map<std::string, std::vector<std::string> > ::const_iterator _iter35;
    for (_iter35 = this->options.begin(); _iter35 != this->options.end(); ++_iter35)
    {
      xfer += oprot->writeString(_iter35->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter35->second.size()));
        std::vector<std::string> ::const_iterator _iter36;
        for (_iter36 = _iter35->second.begin(); _iter36 != _iter35->second.end(); ++_iter36)
        {
          xfer += oprot->writeString((*_iter36));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("valid", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->valid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("trafficleft", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->trafficleft);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("maxtraffic", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->maxtraffic);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("premium", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->premium);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ServiceCall::ascii_fingerprint = "5CF4CC5F4B59F9DE54404CBEC4817C71";
const uint8_t ServiceCall::binary_fingerprint[16] = {0x5C,0xF4,0xCC,0x5F,0x4B,0x59,0xF9,0xDE,0x54,0x40,0x4C,0xBE,0xC4,0x81,0x7C,0x71};

uint32_t ServiceCall::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plugin);
          this->__isset.plugin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->func);
          this->__isset.func = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->arguments.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            iprot->readListBegin(_etype40, _size37);
            this->arguments.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += iprot->readString(this->arguments[_i41]);
            }
            iprot->readListEnd();
          }
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->parseArguments);
          this->__isset.parseArguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceCall::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceCall");
  xfer += oprot->writeFieldBegin("plugin", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->plugin);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("func", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->func);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.arguments) {
    xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->arguments.size()));
      std::vector<std::string> ::const_iterator _iter42;
      for (_iter42 = this->arguments.begin(); _iter42 != this->arguments.end(); ++_iter42)
      {
        xfer += oprot->writeString((*_iter42));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parseArguments) {
    xfer += oprot->writeFieldBegin("parseArguments", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->parseArguments);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* OnlineStatus::ascii_fingerprint = "222AFB4990285E29234328916DC6F924";
const uint8_t OnlineStatus::binary_fingerprint[16] = {0x22,0x2A,0xFB,0x49,0x90,0x28,0x5E,0x29,0x23,0x43,0x28,0x91,0x6D,0xC6,0xF9,0x24};

uint32_t OnlineStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plugin);
          this->__isset.plugin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->packagename);
          this->__isset.packagename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast43;
          xfer += iprot->readI32(ecast43);
          this->status = (DownloadStatus::type)ecast43;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OnlineStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OnlineStatus");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("plugin", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->plugin);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("packagename", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->packagename);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->size);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* OnlineCheck::ascii_fingerprint = "F404EC196E4B82D7BD078F53BD49D034";
const uint8_t OnlineCheck::binary_fingerprint[16] = {0xF4,0x04,0xEC,0x19,0x6E,0x4B,0x82,0xD7,0xBD,0x07,0x8F,0x53,0xBD,0x49,0xD0,0x34};

uint32_t OnlineCheck::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rid);
          this->__isset.rid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->data.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _ktype45;
            ::apache::thrift::protocol::TType _vtype46;
            iprot->readMapBegin(_ktype45, _vtype46, _size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              std::string _key49;
              xfer += iprot->readString(_key49);
              OnlineStatus& _val50 = this->data[_key49];
              xfer += _val50.read(iprot);
            }
            iprot->readMapEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OnlineCheck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OnlineCheck");
  xfer += oprot->writeFieldBegin("rid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->rid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->data.size()));
    std::map<std::string, OnlineStatus> ::const_iterator _iter51;
    for (_iter51 = this->data.begin(); _iter51 != this->data.end(); ++_iter51)
    {
      xfer += oprot->writeString(_iter51->first);
      xfer += _iter51->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* PackageDoesNotExists::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t PackageDoesNotExists::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t PackageDoesNotExists::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pid);
          this->__isset.pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PackageDoesNotExists::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PackageDoesNotExists");
  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->pid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* FileDoesNotExists::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t FileDoesNotExists::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t FileDoesNotExists::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fid);
          this->__isset.fid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FileDoesNotExists::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FileDoesNotExists");
  xfer += oprot->writeFieldBegin("fid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->fid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ServiceDoesNotExists::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t ServiceDoesNotExists::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t ServiceDoesNotExists::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plugin);
          this->__isset.plugin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->func);
          this->__isset.func = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceDoesNotExists::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceDoesNotExists");
  xfer += oprot->writeFieldBegin("plugin", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->plugin);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("func", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->func);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ServiceException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ServiceException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ServiceException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceException");
  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


